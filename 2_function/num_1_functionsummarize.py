"""
    函数:
        指一个具有特定功能的代码块
        作用: 将代码进行封装, 以提高代码的重用性, 提高开发效率
        函数的定义:
            def 函数名(参数列表):
                功能代码块
        函数的使用-调用函数:
            函数名(形参)
    函数的参数:
        1. 函数在定义时, 可以在参数列表的位置定义形参, 如果函数有形参, 再调用函数时必须传递参数(实参)
        2. 实参传递给形参的过程, 实际上就是变量的赋值操作
    函数中的参数类型:
        1. 普通参数:
            又叫位置参数或顺序参数, 也是必须要传递的参数
        2. 默认参数:
            需要在定义形参时指定一个默认值, 调用函数时可以不传参, 使用默认值, 如果传参, 使用传入的实参值
            def 函数名(参数1, 参数2, 参数3 = value)
            默认参数位置必须在普通参数后面定义
        3. 收集参数(不定长参数):
            当不确定需要传递多少个参数时, 可以定义不定长参数, python中由两种形式的不定长参数
            3.1.参数名前加一个 * ,可以接收元组
                *args-存放元组参数
            3.2.参数名前加两个 * ,可以接受字典
                **kwargs-存放字典参数
             args是arguments的缩写,有变量的含义
             kw是keyword的缩写,kwargs可以记忆键值对参数
        4. 命名关键字参数:
            关键字参数定义在收集参数后面, 并且必须通过形参名字进行传递
            def func(参数1, 参数2, *args, name):
                函数功能代码
            函数调用
                func(value1, value2, *args的value, name=value)
    两个类型检测函数:
        1. type(variable) ==> 查看变量数据类型
        2. isinstance(variable_name, data_type) ==> 查看变量是否为指定数据类型, 是则返回True, 不是则返回False
    函数返回值:
        def func():
            功能代码
            return value1, value2...
        注意:
            1. 一个函数无论在哪遇到return, 函数都会直接结束执行
            2. return后面可以没有数据
            3. 函数也可以没有return, 默认返回None
            4. 如果一个函数存在多个返回值, 需要用相同数量的变量进行接收
                函数在返回多个返回值时会自动进行组包操作; 在使用多个变量接收返回值时, 会自动进行拆包操作
"""


# 定义不定长参数, 进行加法运算
def add(*args, flag: bool):
    my_sum: int = 0
    if flag:
        for i in args:
            my_sum += i
        return my_sum
    else:
        return None


my_sum = add(1, 2, 3, flag=True)

print(my_sum)
