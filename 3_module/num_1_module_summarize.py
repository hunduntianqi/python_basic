"""
    模块 ==> 是python程序架构的核心概念之一:
        1. 每一个以扩展名py结尾的python源代码文件都是一个模块
        2. 模块名是一个标识符, 需要符合标识符命名规则
        3. 在模块中定义的全局变量, 函数, 类都是提供给外界直接使用的工具
        4. 模块相当于一个工具包, 使用模块需要先导入模块
        模块导入方式:
            1. import 导入:
                格式: import module_name
                该方式导入后, 可使用'module_name.要使用的工具(全局变量, 函数, 类)'的方式来使用模块中的
                工具
            2. 使用 as 关键字指定模块别名:
                格式: import module_name as module_another_name
                指定模块别名后, 可以使用别名来代替模块名使用, 与直接使用模块名效果一致
                注意: 模块别名应该符合大驼峰命名法
            3. from...import导入:
                格式: from module_name import tool_name
                该方式可以仅导入要使用的部分, 不需要将整个模块全部导入
                注意: 如果导入不同模块的同名函数, 后导入的函数会覆盖先导入的函数
        模块导入注意事项:
            1. import代码应该统一写在代码顶部, 更容易发现冲突
            2. 导入模块发现冲突, 可以使用as关键字给其中一个工具起一个别名
        模块的搜索顺序:
            1. 先搜索当前目录指定模块名的文件, 如果有就直接导入
            2. 当前目录没有, 再搜索系统目录
            注意: 自定义模块名应避免与系统文件名冲突,  python中每一个模块都有一个内置属性__file__
                  可以查看模块的完整路径
    包的概念:
        1.包是一个含有多个模块的特殊目录
        2.目录下有一个特殊的文件__init__.py
        3.包名的命名方式和变量名一致
        4.使用import导入包名可以一次性导入包中的的所有模块
        __init__.py 文件:
            a. 要在外界使用包中的模块, 需要在__init__.py 中指定对外界提供的模块列表
            b. 在__init__.py文件中导入要被外界使用的模块名, 语法如下:
                from . import 模块名1
                from . import 模块名2
                ...
"""